apiVersion: apps/v1
kind: Deployment
metadata:
  name: ntfy-mcp
  labels:
    app: ntfy-mcp
    component: mcp-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ntfy-mcp
  template:
    metadata:
      labels:
        app: ntfy-mcp
    spec:
      containers:
      - name: ntfy-mcp
        image: registry.redhat.io/ubi8/nodejs-18:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          protocol: TCP
        env:
        - name: NPM_CONFIG_CACHE
          value: /tmp/.npm
        - name: NTFY_SERVER_URL
          value: "https://ntfy.sh"
        - name: NTFY_TOPIC
          value: "blackjack-ai-balance-notifications"
        workingDir: /tmp
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Create package.json
          cat > package.json << 'EOF'
          {
            "name": "ntfy-mcp-server",
            "version": "1.0.0",
            "type": "module",
            "dependencies": {
              "@modelcontextprotocol/sdk": "1.0.1",
              "axios": "^1.6.0"
            }
          }
          EOF
          
          # Create app directory and MCP server
          mkdir -p app
          cat > app/index.js << 'EOF'
          import { Server } from '@modelcontextprotocol/sdk/server/index.js';
          import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
          import {
            CallToolRequestSchema,
            ListToolsRequestSchema
          } from '@modelcontextprotocol/sdk/types.js';
          import axios from 'axios';
          
          // Create server instance
          const server = new Server(
            {
              name: 'ntfy-mcp-server',
              version: '1.0.0',
            },
            {
              capabilities: {
                tools: {},
              },
            }
          );
          
          const ntfyServer = process.env.NTFY_SERVER_URL || 'https://ntfy.sh';
          const ntfyTopic = process.env.NTFY_TOPIC || 'blackjack-ai-balance-notifications';
          
          server.setRequestHandler(CallToolRequestSchema, async (request) => {
            const { name, arguments: args } = request.params;
            
            if (name !== 'send_balance_notification') {
              throw new Error(`Unknown tool: ${name}`);
            }
            
            const { message, balance = 0, context = '' } = args || {};
            try {
              if (!message) {
                throw new Error('Missing message field');
              }
              
              const notificationData = {
                message: message,
                title: `ðŸŽ° Blackjack Balance Update: $${balance}`,
                priority: 3,
                tags: ['game', 'casino', 'balance']
              };
              
              console.log(`[Ntfy MCP] Sending notification: ${message}`);
              
              const response = await axios.post(
                `${ntfyServer}/${ntfyTopic}`,
                notificationData,
                { timeout: 10000 }
              );
              
              if (response.status === 200) {
                return {
                  content: [
                    {
                      type: 'text',
                      text: `Successfully sent notification: ${message}`,
                    },
                  ],
                };
              } else {
                throw new Error(`Ntfy server returned ${response.status}`);
              }
            } catch (error) {
              console.error(`[Ntfy MCP] Notification send failed:`, error);
              return {
                content: [
                  {
                    type: 'text',
                    text: `Failed to send notification: ${error.message}`,
                  },
                ],
                isError: true,
              };
            }
          });
          
          server.setRequestHandler(ListToolsRequestSchema, async () => {
            return {
              tools: [
                {
                  name: 'send_balance_notification',
                  description: 'Send push notifications about balance changes via ntfy',
                  inputSchema: {
                    type: 'object',
                    properties: {
                      message: { type: 'string', description: 'Notification message content' },
                      balance: { type: 'number', description: 'Current balance' },
                      context: { type: 'string', description: 'Game context' }
                    },
                    required: ['message']
                  }
                }
              ]
            };
          });
          
          async function main() {
            const transport = new StdioServerTransport();
            await server.connect(transport);
            console.error('Ntfy MCP server running on stdio');
          }
          
          main().catch((error) => {
            console.error('Fatal error in main():', error);
            process.exit(1);
          });
          EOF
          
          # Install dependencies and run
          npm install
          
          # Create simple HTTP wrapper for the MCP server
          cat > server.js << 'HTTPEOF'
          import express from 'express';
          const app = express();
          
          app.use(express.json());
          
          // Health check endpoint
          app.get('/health', (req, res) => {
            res.json({ status: 'ok', service: 'ntfy-mcp' });
          });
          
          // MCP notification endpoint
          app.post('/notify', async (req, res) => {
            try {
              const { message, balance, context } = req.body;
              
              if (!message) {
                return res.status(400).json({ error: 'Missing message' });
              }
              
              const notificationData = {
                message: message,
                title: `ðŸŽ° Blackjack Balance Update: $${balance || 0}`,
                priority: 3,
                tags: ['game', 'casino', 'balance']
              };
              
              const response = await fetch('https://ntfy.sh/blackjack-ai-balance-notifications', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(notificationData)
              });
              
              if (response.ok) {
                res.json({ success: true, message: 'Notification sent' });
              } else {
                res.status(500).json({ error: 'Failed to send notification' });
              }
            } catch (error) {
              res.status(500).json({ error: error.message });
            }
          });
          
          app.listen(8000, () => {
            console.log('ntfy MCP HTTP server running on port 8000');
          });
          HTTPEOF
          
          # Install express and run HTTP server
          npm install express
          node server.js
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"