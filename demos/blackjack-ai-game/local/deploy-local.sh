#!/bin/bash

# Local deployment script for Blackjack AI Game
# This script sets up the complete local development environment

set -e

echo "🎮 Setting up Blackjack AI Game Local Environment"
echo "================================================="

# Check prerequisites
check_prerequisites() {
    echo "📋 Checking prerequisites..."
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        echo "❌ Node.js is required but not installed."
        echo "   Please install Node.js 18+ from https://nodejs.org/"
        exit 1
    fi
    
    NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_VERSION" -lt 18 ]; then
        echo "❌ Node.js 18+ is required. Current version: $(node --version)"
        exit 1
    fi
    
    # Check npm
    if ! command -v npm &> /dev/null; then
        echo "❌ npm is required but not installed."
        exit 1
    fi
    
    # Check for AI model runtime (Ollama or alternatives)
    if command -v ollama &> /dev/null; then
        echo "✅ Ollama found"
        AI_RUNTIME="ollama"
    elif command -v ramalama &> /dev/null; then
        echo "✅ Ramalama found"
        AI_RUNTIME="ramalama"
    else
        echo "⚠️  No local AI runtime found (Ollama/Ramalama)"
        echo "   You can still run with remote AI models"
        AI_RUNTIME="none"
    fi
    
    echo "✅ Prerequisites check completed"
}

# Setup environment
setup_environment() {
    echo "🔧 Setting up environment..."
    
    # Create .env.local if it doesn't exist
    if [ ! -f ".env.local" ]; then
        echo "📝 Creating .env.local configuration..."
        cat > .env.local << EOF
# Blackjack AI Game Local Configuration
# Generated by deploy-local.sh on $(date)

# AI Model Configuration
VITE_USE_LOCAL_AI=true
VITE_LOCAL_AI_ENDPOINT=http://localhost:11434
VITE_REMOTE_AI_ENDPOINT=https://api.example.com/v1
VITE_REMOTE_AI_KEY=your-remote-api-key-here

# Performance Monitoring
VITE_SHOW_PERFORMANCE_MONITOR=true

# Development Settings
VITE_DEBUG_MODE=true

# MAAS Configuration (Optional)
MAAS_API_KEY=your-maas-key-here
MAAS_ENDPOINT=https://your-maas-endpoint
MAAS_MODEL=your-model-name
EOF
        echo "✅ Created .env.local - please update with your API keys"
    else
        echo "✅ .env.local already exists"
    fi
}

# Install dependencies
install_dependencies() {
    echo "📦 Installing npm dependencies..."
    npm install
    echo "✅ Dependencies installed"
}

# Setup AI model
setup_ai_model() {
    if [ "$AI_RUNTIME" = "ollama" ]; then
        echo "🤖 Setting up Ollama AI model..."
        
        # Check if Ollama is running
        if ! curl -s http://localhost:11434/api/version &> /dev/null; then
            echo "🚀 Starting Ollama service..."
            ollama serve &
            sleep 5
        fi
        
        # Pull model if not exists
        if ! ollama list | grep -q "llama3.2:1b"; then
            echo "📥 Pulling Llama 3.2 1B model (this may take a while)..."
            ollama pull llama3.2:1b
        else
            echo "✅ Llama 3.2 1B model already available"
        fi
        
        # Test model
        echo "🧪 Testing AI model..."
        if ollama run llama3.2:1b "Test response" &> /dev/null; then
            echo "✅ AI model is working"
        else
            echo "⚠️  AI model test failed - check Ollama installation"
        fi
        
    elif [ "$AI_RUNTIME" = "ramalama" ]; then
        echo "🤖 Setting up Ramalama AI model..."
        echo "🚀 Starting Ramalama server..."
        ramalama serve --model llama3.2:1b --port 8080 &
        sleep 5
        echo "✅ Ramalama server started"
        
    else
        echo "⚠️  No local AI runtime configured"
        echo "   The game will use remote AI or fallback to basic strategy"
    fi
}

# Start development server
start_development() {
    echo "🚀 Starting development server..."
    
    # Build the project first
    echo "🔨 Building project..."
    npm run build
    
    # Start development server
    echo "🌐 Starting development server at http://localhost:5173"
    echo ""
    echo "🎮 Game Controls:"
    echo "   - Place bets and play blackjack"
    echo "   - Click '🧠 What does the book say?' for AI advice"
    echo "   - Toggle '🔬' for performance monitoring"
    echo ""
    echo "🔧 Development Commands:"
    echo "   npm run dev          # Start dev server"
    echo "   npm run build        # Build for production"
    echo "   npm run lint         # Lint code"
    echo "   npm run type-check   # Type checking"
    echo ""
    echo "📊 Monitor performance differences between local and remote AI!"
    echo ""
    
    npm run dev
}

# Main execution
main() {
    echo "Starting local deployment..."
    
    check_prerequisites
    setup_environment
    install_dependencies
    setup_ai_model
    
    echo ""
    echo "🎉 Local environment setup complete!"
    echo ""
    echo "📝 Next steps:"
    echo "   1. Update .env.local with your API keys if using remote AI"
    echo "   2. Run 'npm run dev' to start the development server"
    echo "   3. Open http://localhost:5173 in your browser"
    echo ""
    
    # Ask if user wants to start development server
    read -p "🚀 Start development server now? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        start_development
    else
        echo "✅ Setup complete. Run 'npm run dev' when ready to start."
    fi
}

# Handle script interruption
trap 'echo ""; echo "🛑 Setup interrupted"; exit 1' INT

# Run main function
main "$@"